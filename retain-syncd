#!/usr/bin/env bash

configName="$1"
configDir="${XDG_CONFIG_HOME:-$HOME/.config}/retain-sync/$configName"

# check if specified config exists
if ! [[ -d "$configDir" ]]; then
	printf "\'$configName\' is not a valid configuration. Please run \'retain-sync initialize\'.\n" | \
		systemd-cat -p err -t 'retain-syncd'
	exit 1
fi

# source variables from config
configError=0
while read -r i; do
	((lineNumber++))

	# line is blank, skip
	[[ "$i" =~ ^$ ]] && continue

	# line is a comment, skip
	[[ "$i" =~ ^# ]] && continue

	# run if line is missing an equals sign
	if ! [[ "$i" =~ = ]]; then
		echo "Error: line $lineNumber of config file: unrecognized syntax" | \
			systemd-cat -p err -t 'retain-syncd'
		((configError++))
	fi

	# parse option, removing leading/trailing whitespace
	varName="$(echo "$i" | cut -d '=' -f 1 | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//')"
	varValue="$(echo "$i" | cut -d '=' -f 2- | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//')"

	# check if option is recognized
	if ! echo "$varName" | grep -qFf <(cat <<-EOF
		localDir
		remoteUser
		remoteHost
		remoteDir
		storageLimit
		sshfsOptions
		deleteAlways
		syncExtraFiles
		inflatePriority
	EOF
	); then
		printf "Error: line $lineNumber of config file: unrecognized option \'$varName\'" | \
			systemd-cat -p err -t 'retain-syncd'
		((configError++))
	fi

	# check if value of boolean options is "yes" or "no"
	if echo "$varName" | grep -qFf <(cat <<-EOF
		deleteAlways
		syncExtraFiles
		inflatePriority
	EOF
	); then
		if [[ "${varValue,,}" != "yes" && "${varValue,,}" != "no" ]]; then
			printf "Error: line $lineNumber of config file: unrecognized value for boolean option\n"
			((configError++))
		fi
	fi

	# declare variable
	declare -g "$varName"="$varValue"
done <"$configDir/config"

# exit if there were errors in config file
[[ ! $configError -ne 0 ]] || exit 1

# format variables
localDir="${localDir%/}"
remoteDir="${remoteDir%/}"
remoteUser="${remoteUser:+$remoteUser@}"
sshfsOptions=(-o "$sshfsOptions")

# escape paths for use in sed substitutions
localDirEsc="$(sed 's/[][()\.^$?*+]/\\&/g' <<< "$localDir")"
remoteDirEsc="$(sed 's/[][()\.^$?*+]/\\&/g' <<< "$remoteDir")"
configDirEsc="$(sed 's/[][()\.^$?*+]/\\&/g' <<< "$configDir")"

# check if initialization was interrupted
if [[ -f "$localDir/.retain-sync_part" ]]; then
	echo "Initialization of this directory was interrupted." | \
		systemd-cat -p err -t 'retain-syncd'
	printf "Please run \'retain-sync initialize\' to complete it or \'retain-sync retrieve\' to cancel it.\n" | \
		systemd-cat -p err -t 'retain-syncd'
	exit 1
fi

# mount sshfs share if not already mounted
mountpoint -q "$configDir/mnt" || sshfs "${sshfsOptions[@]}" \
	"$remoteUser$remoteHost:$remoteDir" "$configDir/mnt" || exit 1

fileWatch() {
	while true; do
		# wait for a file to be opened
		fileName="$(inotifywait -qre open --format '%w%f' "$localDir" "$configDir/mnt" | \
			sed "s|$localDir|$configDir/mnt|")"

		# make sure file is a normal file and not hidden or under a hidden directory
		if [[ -f "$fileName" ]] && [[ ! "${fileName//$configDir/}" =~ /\. ]]; then
			# test if file exists in priority.csv
			fileLine=$(grep -F "$fileName" "$configDir/priority.csv")

			if [ $? -eq 0 ]; then
				# file exists, increase file priority by one
				newPriority=$(echo "scale=6; $(echo "$fileLine" | rev | \
					cut -d ',' -f 1 | rev)+1" | bc)
				sed -i "s|$fileName,[0-9\.]*$|$fileName,$newPriority|" \
					"$configDir/priority.csv"
			else
				# new file, priority will be set on next sync operation
				continue
			fi
		else
			# file is hidden or not a normal file
			continue
		fi

		# sleep to prevent file access from being registered multiple times
		sleep 1
	done
}

fileWatch &

# create PIDfile
mkdir -p "$XDG_RUNTIME_DIR/retain-sync"
echo "$!" > "$XDG_RUNTIME_DIR/retain-sync/retain-syncd.pid"
